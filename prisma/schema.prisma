// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
}

enum SubscriptionPlan {
  CRAWL
  WALK
  RUN
}

model User {
  id                      String                 @id @default(cuid())
  name                    String?
  email                   String?                @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    UserRole               @default(USER)
  accounts                Account[]
  isActive                Boolean                @default(true)
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?
  discount                Float?
  monthlyTotal            Float?
  subscriptions           Subscription[]
  eventLogs               EventLog[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Subscription {
  id        String             @id @default(cuid())
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      SubscriptionPlan   @default(CRAWL)
  status    SubscriptionStatus @default(ACTIVE)
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model EventLog {
  id        String   @id @default(cuid())
  event     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  app       Json?
  api       Json?
}

model SubPlan {
  id                   String    @id @default(cuid())
  name                 String
  isActive             Boolean   @default(true)
  isFree               Boolean   @default(false)
  aiTokenLimitPerDay   Int
  aiTokenLimitPerMonth Int
  aiTokenLimitPerYear  Int
  realApiLimitPerDay   Int
  realApiLimitPerMonth Int
  realApiLimitPerYear  Int
  createdAt            DateTime? @default(now())
  updatedAt            DateTime? @default(now())
}

model AffiliateLink {
  id            String    @id @default(cuid())
  normalLink    String
  affiliateLink String
  isActive      Boolean   @default(true)
  type          String
  programLink   String
  programNotes  String
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @default(now())
}

model EffectiveTaxRate {
  id                              String    @id @default(cuid())
  state                           String
  country                         String
  medianHomeValue                 Float?
  medianAnnualPropertyTaxPayment  Float?
  averageEffectivePropertyTaxRate Float?
  createdAt                       DateTime? @default(now())
  updatedAt                       DateTime? @default(now())

  @@unique([country])
}

model Property {
  id         String    @id @default(cuid())
  propertyId String
  detail     Json?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())
}

model CensusPopulation {
  zip_code                              Int
  estimate_sex_and_age_total_population Int
  year                                  Int

  @@id([zip_code, year])
}

model CensusEconomy {
  zip_code                                                Int
  estimate_employment_status_population_16_years_and_over Int
  year                                                    Int

  @@id([zip_code, year])
}
